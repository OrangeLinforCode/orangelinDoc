# Flink基础

# 1.概念

批处理

有界流

无界流

## 2.部署方式

1. local-cluster

2. standalone

3. Yarn

   ![1617189812985](flink基础.assets/1617189812985.png)

   > per-job
   >
   > 注意：flink的RM也是在 Yarn的AM中启动的

   1. **Session-Cluster**

      ![1617189996491](flink基础.assets/1617189996491.png)

      

      ![1617189214021](flink基础.assets/1617189214021.png)

   2. **Application Mode**(1.11后新增)

   3. **Per-Job-Cluster**

      ![1617189978137](flink基础.assets/1617189978137.png)

4. K8S部署

   

### 3. 运行时架构

TaskManager： 类比process 进程

Task on slot  ： 类似 thread 线程

#### 运行时组件

![1617189618373](flink基础.assets/1617189618373.png)



#### slot的概念

每个线程执行在固定的计算资源上，这个资源就是 slot

slot之间内存是独享的，cpu不独享

所以 slot数量最好配成cpu核心数，减少cpu时间片轮转



#### 并行的概念

数据并行： 同一个任务，不同的并行子任务，处理不同的数据



任务并行：同一时间，不同的slot在执行不同的任务



允许slot共享，可以提高资源利用率



一个流处理程序所需要的slot数量，其实就是整个处理流程中最大的一个task的并行度



#### 数据传输形式

![1617188092258](flink基础.assets/1617188092258.png)

> 类似spark里的宽窄依赖

并行度相同且one to one： 合并任务链



spark的任务链：按阶段划分，同一阶段的窄依赖会形成任务依赖链

flink的任务链：按并行度划分，没有阶段划分？

![1617188872538](flink基础.assets/1617188872538.png)

> flink的重点是**共享slot**。没有阶段概念
>
> 最后 这个5个任务是在 2个slot里面，其中 
>
> ![1617188941837](flink基础.assets/1617188941837.png)
>
> 在一个slot里



TaskManager的数量和slot的数量，决定了并行处理的最大能力

程序执行时的并行度不一定都用到这个最大能力，

TM*slot：静态

程序执行：动态



#### 任务的概念

flink里没有转换算子和行动算子概念

任务即是 代码中定义的每一步操作（算子，operator）就是一个任务

算子可以设置并行度，所以每一步操作可以有多个并行子任务

flink可以将前后执行的不同任务合并起来

并行子任务的分配：

![1617191362220](flink基础.assets/1617191362220.png)

# Flink核心编程

orangelin2435@gmail.com